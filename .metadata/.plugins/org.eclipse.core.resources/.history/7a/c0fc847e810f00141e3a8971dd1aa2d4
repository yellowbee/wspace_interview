package com.leetcode.miscellaneous;

import java.util.ArrayList;
import java.util.List;

import com.leetcode.oj.common.Interval;

/*
 * Test cases:
 * [[1,5]], [5,7]
 * [[1,3]], [5,7]
 * [[1,5]], [1,7]
 * [[1,5]], [0,0]
 * [[1,5],[6,8]], [5,6]
 */

public class InsertInterval {
	public static void main(String[] args) {
		InsertInterval ii = new InsertInterval();
		List<Interval> intervals = new ArrayList<Interval>();
		intervals.add(new Interval(1,5));
		//intervals.add(new Interval(6,8));
		//intervals.add(new Interval(6,7));
		//intervals.add(new Interval(8,10));
		//intervals.add(new Interval(12,16));
		Interval newInterval = new Interval(5,7);
		
		System.out.println(intervals.get(0));
		System.out.println(ii.insert(intervals, newInterval));
	}
	
	public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
		List<Interval> result = new ArrayList<Interval>();
		if (intervals.isEmpty()) {
			result.add(newInterval);
			return result;
		}
		
		int merged_start = -1;
		
		for (int i=0; i<intervals.size(); i++) {
			int cur_start = intervals.get(i).start;
			int cur_end = intervals.get(i).end;
			
			if (cur_end < newInterval.start || cur_start > newInterval.end) { // if current interval has no overlap with new interval
				if (i==intervals.size()-1 && cur_start > newInterval.end) {
					result.add(newInterval);
				}
				result.add(intervals.get(i));
				if (i==intervals.size()-1 && cur_end < newInterval.start) {
					result.add(newInterval);
				}
			}
			else {
				if (merged_start == -1) {
					// intialization					
					int next_start = -1;
					if (i<intervals.size()-1) {
						next_start = intervals.get(i+1).start;
					}
					else {
						next_start = Integer.MAX_VALUE;
					}
					
					if (newInterval.start <= cur_start) {
						merged_start = newInterval.start;
						if (newInterval.end <= cur_end) {
							result.add(new Interval(merged_start, cur_end));
						}
						else if (newInterval.end >= cur_end) {
							result.add((new Interval(merged_start, newInterval.end)));
						}
						else if (newInterval.end < cur_start) {
							result.add(new Interval(newInterval.start, newInterval.end));
							result.add(intervals.get(i));
						}
						else if (newInterval.end == cur_start) {
							result.add(new Interval(newInterval.start, cur_end));
						}
					}
					else if (newInterval.start >= cur_start && newInterval.start <= cur_end) { // if newInterval's start falls btw cur_start and cur_end
						if (newInterval.end <= cur_end) {
							result.add(new Interval(cur_start, cur_end));
						}
						else if (newInterval.end >= cur_end && newInterval.end < next_start) {
							result.add(new Interval(cur_start, newInterval.end));
						}
						else {
							merged_start = cur_start;
						}
					}
					else if (newInterval.start >= cur_end && newInterval.end <= next_start) { // if both newInterval's start and end fall btw cur_end and next_start
						result.add(new Interval(merged_start, newInterval.end));
					}
				}
				else {
					if (newInterval.end < cur_start) {
						result.add(new Interval(merged_start, newInterval.end));
						result.add(intervals.get(i));
					}
					else if (newInterval.end >= cur_start && newInterval.end <= cur_end){ // if newInterval's end falls btw current start and current end
						result.add(new Interval(merged_start, cur_end));
					}
				}
			}
		}
		return result;
    }
}
