package com.amazon.tree;

import com.leetcode.oj.binarytree.BTBinaryTreeFromInNPreOrder;
import com.leetcode.oj.common.TreeNode;
import com.leetcode.oj.common.TreeUtility;

public class LowestCommonAncestor {
	public static void main(String[] args) {
		int[] pre = {1,2,4,5,3,6,7};
		int[] in = {4,2,5,1,6,3,7};

		TreeNode root = BTBinaryTreeFromInNPreOrder.buildTree(pre, in);
		TreeUtility.printTreeInSequence(root);
	}
	
	public static TreeNode findLCA(TreeNode root, TreeNode n1, TreeNode n2) {
		if (root == null) {
			return null;
		}
		
		if (root == n1 || root == n2) {
			return root;
		}
		
		TreeNode left = findLCA(root.left, n1, n2);
		TreeNode right = findLCA(root.right, n1, n2);
		
		if (left != null && right != null) {// n1 and n2 belong to left tree and right tree respectively
			return root;
		}
		
		return left != null ? findLCA(left, n1, n2) : findLCA(right, n1, n2);
	}
}
